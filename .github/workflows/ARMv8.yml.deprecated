name: ARMv8

on:
  repository_dispatch:
#  release:
#    types: published
  push:
    branches:
      - master
    paths:
      - 'aarch64/ARMv8.config'
  schedule:
    - cron: 0 16 * * *
  watch:
    types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: aarch64/ARMv8.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  MRG_ADD_SH: aarch64/ARMv8.sh
  Update_Ver_SH: aarch64/autoVersion.sh
  Get_Imgs_SH: aarch64/getImgs.sh
  DOCKER_BUILD_SH: buildImage.sh
#   SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  TZ: Asia/Shanghai
  FILE_NAME: ARMv8
  PRODUCT_NAME: ARMv8
jobs:
  build:
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    #- name: WeChat notification
    #  run: curl https://sc.ftqq.com/${{ secrets.ServerChan }}.send?text=${{ env.FILE_NAME }}开始编译
      
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
        sudo -E apt-get -qq install rename
        sudo -E apt-get -qq install time
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date "+%Y-%m-%d")" >> $GITHUB_ENV
#        echo "::set-env name=useVersionInfo::$useVersionInfo"
#        echo "::set-env name=DATE::$(date "+%Y-%m-%d %H:%M:%S")"

    #- name: Load custom feeds
    #  run: |
    #    [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
    #    chmod +x $DIY_P1_SH
    #    cd openwrt
    #    ../$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        sed -i 's/192.168.1.1/192.168.123.1/g' package/base-files/files/bin/config_generate
        sed -i 's/OpenWrt/MRG AutoBuild ${{ env.DATE1 }} @ OpenWrt/g' package/lean/default-settings/files/zzz-default-settings
        
#     - name: SSH connection to Actions
#       uses: P3TERX/debugger-action@master
#       if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DATE_YMD=_$(date +"%Y%m%d")" >> $GITHUB_ENV
        
    - name: Build firmware
      id: build
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd /opt
        chmod +x $GITHUB_WORKSPACE/$Get_Imgs_SH
        sudo $GITHUB_WORKSPACE/$Get_Imgs_SH
        sudo tar xvzf *.tar.gz
        sudo mkdir imgs
        sudo xz -d Armbian*Aml*\+o*
        sudo xz -d Armbian*Beike*
        sudo xz -d Armbian*L1*
        sudo mv *.img imgs
        sudo cp /workdir/openwrt/bin/targets/armvirt/64/openwrt-armvirt-64-default-rootfs.tar.gz /opt/openwrt
        cd /opt/openwrt
        chmod +x $GITHUB_WORKSPACE/$Update_Ver_SH
        sudo $GITHUB_WORKSPACE/$Update_Ver_SH
        sudo ./mk_n1_opimg.sh
        sudo ./mk_s905x3_opimg.sh
        sudo ./mk_beikeyun_opimg.sh
        sudo ./mk_l1pro_opimg.sh
        sudo ./n1-to-vplus.sh
        echo "::set-output name=status::success"

    - name: Organize files
      id: organize
      if: steps.build.outputs.status == 'success' && !cancelled()
      run: |
        sudo cp /opt/openwrt/tmp/*.img $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/64
        cd $GITHUB_WORKSPACE
        tar -zcvf NA-AllPackages.tar.gz openwrt/bin/packages
        cp NA-AllPackages.tar.gz openwrt/bin/targets/*/*
        cd openwrt/bin/targets/*/*
        rm -rf packages sha256sums config.buildinfo feeds.buildinfo openwrt-armvirt-64-default.manifest openwrt-armvirt-64-Image openwrt-armvirt-64-rootfs-ext4.img version.buildinfo
        bzip2 *.img
        rename 's/Beike/NA-Beike/' Beike*bz2
        rename 's/L1/NA-L1/' L1*bz2
        rename 's/N1/NA-N1/' N1*bz2
        rename 's/openwrt/NA-openwrt/' openwrt*gz
        rename 's/S905x3/NA-S905x3/' S905x3*bz2
        rename 's/VPlus/NA-VPlus/' VPlus*bz2
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin/targets/*/*/bin.tar.gz

    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      if: env.UPLOAD_FIRMWARE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Create release
      id: release
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.DATE }} for ${{ env.PRODUCT_NAME }}
        allowUpdates: true
        tag: ${{ env.FILE_NAME }}
        commit: master
        token: ${{ secrets.RELEASES_TOKEN }}
        body: |
          默认IP：192.168.123.1 默认密码： password
          当前使用版本:【编译前的最后一次[➦主源码](https://github.com/coolsnowwolf/lede)更新记录】
          ${{ env.useVersionInfo }}
        artifacts: ${{ env.FIRMWARE }}/*
    
    - name: WeChat notification
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: curl https://sc.ftqq.com/${{ secrets.ServerChan }}.send?text=${{ env.FILE_NAME }}编译完成

    - name: Upload firmware to cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"

    - name: Upload firmware to WeTransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
